<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
			http://www.springframework.org/schema/context  
			http://www.springframework.org/schema/context/spring-context-3.2.xsd    
			http://www.springframework.org/schema/aop  
			http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  
			http://www.springframework.org/schema/tx   
			http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
			http://www.springframework.org/schema/task   
        	http://www.springframework.org/schema/task/spring-task-3.2.xsd    ">
	
	<!-- 加载数据库属性配置文件 -->
	<!-- <context:property-placeholder location="classpath:datasourceConfig.properties" /> -->
	<!-- 加载数据库属性配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		 <property name="locations">
            <list>
				<value>classpath:datasourceConfig.properties</value>
				<value>classpath:gisContext.properties</value>
				<value>classpath:decode.properties</value>
				<value>classpath:testPlan.properties</value>
				<value>classpath:errorLogManage.properties</value>
				<value>classpath:activationShow.properties</value>
				<!-- <value>classpath:server.properties</value>
				<value>classpath:server.properties</value>
				<value>classpath:statisticAnalysis.properties</value> -->
			</list>
        </property> 
	</bean>
	
	<!-- 数据库连接池c3p0配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${db.driverClass}"/>
		<property name="jdbcUrl" value="${db.url}"/>
		<property name="user" value="${db.username}"/>
		<property name="password" value="${db.password}"/>
		
		<!--连接池中保留的最大连接数。默认值: 15 --> 
		<property name="maxPoolSize" value="${db.maxPoolSize}"/>
		<!-- 连接池中保留的最小连接数，默认为：3-->
		<property name="minPoolSize" value="${db.minPoolSize}"/>
		<!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3-->
		<property name="initialPoolSize" value="${db.initialPoolSize}"/>
		
		<!--最大空闲时间，3600秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 --> 
		<property name="maxIdleTime" value="3600" />
		<!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 --> 
		<!-- <property name="checkoutTimeout" value="3000"/> -->
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 --> 
		<!-- <property name="acquireIncrement" value="10"/> -->
		<!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次--> 
		<!-- <property name="acquireRetryAttempts" value="0"/> -->
		<!--重新尝试的时间间隔，默认为：1000毫秒--> 
		<!-- <property name="acquireRetryDelay" value="1000" /> -->
		<!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 --> 
		<!-- <property name="autoCommitOnClose">false</property> -->
		<!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。默认值: null --> 
		<!-- <property name="automaticTestTable">Test</property> -->
		<!--如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: false--> 
		<!-- <property name="breakAfterAcquireFailure">false</property> -->
		<!--每600秒检查所有连接池中的空闲连接。默认值: 0，不检查 --> 
		<property name="idleConnectionTestPeriod" value="600" />
		<!--c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 0--> 
		<!-- <property name="maxStatements">100</property> -->
		<!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。默认值: 0 --> 
		<!-- <property name="maxStatementsPerConnection"></property> -->
	</bean>

	<bean id="jdbcTemplate"
		class="com.datang.common.dao.jdbc.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<bean id="springJdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- hibernate的sessionFactory配置 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="configLocation" value="classpath:hibernate.cfg.xml" /> -->
		<property name="hibernateProperties"  >
			<props>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">validate</prop> -->
				<prop key="hibernate.dialect">
					org.hibernate.dialect.PostgreSQLDialect
				</prop>
				<!-- <prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop> -->
				
				<!-- 是否开启二级缓存 -->
	            <!--  hibernate.cache.use_second_level_cache=false -->
	            <!-- 是否开启查询缓存 -->
	            <!--   hibernate.cache.use_query_cache=false -->
	            <!-- 数据库批量查询最大数 -->
	            <!--   hibernate.jdbc.fetch_size=50 -->
	            <!-- 数据库批量更新、添加、删除操作最大数 -->
	            <!--  hibernate.jdbc.batch_size=50 -->
	            <!-- 是否自动提交事务 -->
	            <!--  hibernate.connection.autocommit=true -->
	            <!-- 指定hibernate在何时释放JDBC连接 -->
	            <!-- hibernate.connection.release_mode=auto -->
	            <!-- 创建session方式 hibernate4.x 的方式 -->
	            <!-- hibernate.current_session_context_class=org.springframework.orm.hibernate4.SpringSessionContext -->
	            <!-- javax.persistence.validation.mode默认情况下是auto的，就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包 
	                   所以把它设置为none即可 -->
	            <!-- javax.persistence.validation.mode=none -->
				<prop key="current_session_context_class">thread</prop>
				<prop key="hibernate.connection.autocommit">true</prop>
				<!-- <prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop> -->  
			</props>
		</property>
		<!-- 自动扫描注解方式配置的hibernate类文件 -->
		<property name="packagesToScan">
			<list>
				<value>com.datang.domain</value>
				<value>com.datang.service.influx.bean</value>
			</list>
		</property>
	</bean>
   
	<!-- 事物管理 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 事物通知(加强) -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" propagation="SUPPORTS"/>
			<tx:method name="get*" read-only="true" propagation="SUPPORTS"/>
			<tx:method name="query*" read-only="true" propagation="SUPPORTS"/>
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<!-- 事物配置 -->
	<aop:config>
		<!-- 切点 -->
		<aop:pointcut id="txPointcut"
			expression="execution(public * com.datang.service..*.*(..))" />
		<!-- 切面 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
	
	<!-- 启用事物注解 -->
	<tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager"/> 
	
	<!-- 启用注解扫描 -->
	<context:annotation-config />
	<context:component-scan base-package="com.datang" />
	
	<!-- <import resource="server.xml"/>-->
	<import resource="security.xml"/> 
	<import resource="server.xml"/>
	<import resource="applicationContext-quartz.xml"/>
	
</beans>